generator client {
  provider        = "prisma-client-js"
  binaryTargets   = ["native", "rhel-openssl-1.0.x", "darwin-arm64"]
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "quippets", "habits", "ai_newsletter"]
}

// Cross-purpose user table
model User {
  id        Int            @id @default(autoincrement())
  name      String
  quotes    Quote[]
  favorites UserFavorite[] @relation("UserFavorites") // Many-to-many relation through UserFavorite

  // Telegram fields
  telegramId String?
  messages   Message[]

  // Habit project fields
  habits   Habit[]
  timezone String  @default("America/New_York")

  @@map("users")
  @@schema("public")
}

// ------------ Quippet Project Models ------------ //
model Quote {
  id           Int            @id @default(autoincrement())
  createdAt    DateTime       @unique @default(now())
  meta         String?
  content      String
  quotee       String?
  user         User           @relation(fields: [userId], references: [id])
  userId       Int
  tags         Tag[]
  deleted      Boolean        @default(false)
  book         Book?          @relation(fields: [bookId], references: [id])
  bookId       Int?
  userFavorite UserFavorite[] @relation("UserFavorites") // Many-to-many

  @@map("quotes")
  @@schema("quippets")
}

model UserFavorite {
  user    User  @relation(fields: [userId], references: [id], name: "UserFavorites")
  userId  Int
  quote   Quote @relation(fields: [quoteId], references: [id], name: "UserFavorites")
  quoteId Int

  @@id([userId, quoteId])
  @@map("user_favorites")
  @@schema("quippets")
}

model Book {
  id       Int     @id @default(autoincrement())
  title    String  @unique
  author   Author  @relation(fields: [authorId], references: [id])
  authorId Int
  quotes   Quote[]
  source   String?

  @@map("books")
  @@schema("quippets")
}

model Author {
  id    Int    @id @default(autoincrement())
  name  String @unique
  books Book[]

  @@map("authors")
  @@schema("quippets")
}

model Tag {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  quotes Quote[]

  @@map("tags")
  @@schema("quippets")
}

// ------------ Habit Project Models ------------ //

model Message {
  id      Int      @id @default(autoincrement())
  text    String
  userId  Int
  created DateTime
  user    User     @relation(fields: [userId], references: [id])

  @@map("messages")
  @@schema("habits")
}

model Habit {
  id        Int        @id @default(autoincrement())
  userId    Int
  name      String
  dataType  String
  user      User       @relation(fields: [userId], references: [id])
  reminders Reminder[]
  habitLogs HabitLog[]

  @@map("habits")
  @@schema("habits")
}

model HabitLog {
  id      Int      @id @default(autoincrement())
  habitId Int
  date    DateTime @db.Date
  value   String
  habit   Habit    @relation(fields: [habitId], references: [id], onDelete: Cascade)

  @@unique([habitId, date])
  @@map("habit_logs")
  @@schema("habits")
}

model Reminder {
  id      Int    @id @default(autoincrement())
  habitId Int
  time    String
  habit   Habit  @relation(fields: [habitId], references: [id])

  @@unique([habitId, time])
  @@map("reminders")
  @@schema("habits")
}

// ------------ AI Newsletter Project Models ------------ //
enum NewsletterStatus {
  PROPOSED
  PUBLISHED

  @@map("newsletter_status")
  @@schema("ai_newsletter")
}

model Newsletter {
  id          Int              @id @default(autoincrement())
  title       String           @unique
  status      NewsletterStatus @default(PROPOSED)
  votes       Int              @default(0)
  publishedAt DateTime?
  content     String?

  @@map("newsletters")
  @@schema("ai_newsletter")
}
